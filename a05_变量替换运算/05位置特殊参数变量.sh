#!/bin/bash
# **********************************************************
# * Author : liangliangSu
# * Email : sll917@hotmail.com
# * Create time : 2022-12-28 16:44
# * Filename : 05位置特殊参数变量.sh
# **********************************************************
#前面已经讲到，变量名只能包含数字、字母和下划线，因为某些包含其他字符的变量有特殊含义，这样的变量被
#称为特殊变量。
: '
#特殊变量列表
#变量 含义
#**********************************************************************************
$0 当前脚本的文件名

Sn 传递给脚本或函数的参数, n 是一个数字,表示第几个参数, 例如, 第一个参数是$1 ,第二个参数是$2

$# 传递给脚本或函数的参数个教

$* 传递给脚本或函数的所有参数,被双引号（" "）包含时，加引号代表了所有的参数作为一个整体传递；

$@ 传递给脚本或函数的所有參数, 被双引号(" ")包含时,加引号代表了所有的参数挨个传递；

$? 上个命令的退出状态 , 或函数的返回值

$- 显示Shell使用的当前选顶,参看set命<

$$ 当前Shell进程ID, 对于 Shell 脚本 , 就是这些脚本所在的进程ID

$! 后台运行的最后一个进程的ID号
'
#请看下面的脚本：
#!/bin/bash
echo "#脚本名称本身：$0"
echo "#第一个shell脚本的位置参数: $1"
echo "#第二个shell脚本的位置参数: $2"
echo "#第三个shell脚本的位置参数: $3"
echo "#脚本接受参数的总和为：     $#"
curl -I qq.com &>/dev/null   #判断网络通讯是否正常
echo "运行命令的状态为:$?"
echo "脚本的ID为: $$"
echo "\$* 的结果为:$*" （对比观察）
echo "\$@ 的结果为:$@" （对比观察）
echo '(1)-----------------------------------------------------------'
echo "\$* 循环接收的结果"
for i in "$*"; do
	echo $i
done
echo "\$@ 循环接收的结果"
for j in "$@"; do
	echo $j
done
echo '(2)-----------------------------------------------------------'

: '
$* 和 $@ 的区别
$* 和 $@ 都表示传递给函数或脚本的所有参数:
1)不被双引号(" ")包含时，都以"$1" "$2" … "$n" 的形式输出所有参数。
2)但是当它们被双引号(" ")包含时，
"$*" 会将所有的参数作为一个整体，以"$1 $2 … $n"的形式输出所有参数；
"$@" 会将各个参数分开，以"$1" "$2" … "$n" 的形式输出所有参数。
#$*循环之后会将参数整体输出；
#$@循环之后会将参数分个输出！
'
#下面的例子可以清楚的看到 $* 和 $@ 的区别：
echo "print each param from \$*"
for var in $*; do
	echo "$var"
done
echo "print each param from \$@"
for var in $@; do
	echo "$var"
done
echo '(3)-----------------------------------------------------------'
echo "print each param from \"\$*\""
for var in "$*"; do
	echo "$var"
done
echo "print each param from \"\$@\""
for var in "$@"; do
	echo "$var"
done

