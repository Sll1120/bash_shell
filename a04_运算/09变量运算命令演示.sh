#!/bin/bash
# **********************************************************
# * Author : liangliangSu
# * Email : sll917@hotmail.com
# * Create time : 2023-01-30 14:42
# * Filename : 09变量运算命令演示.sh
# **********************************************************
echo '(1)-----------------------完美分割线--------------------------------'
#根据当前时间计算明年时间
#编写思路：先获取当前时间 +%F 是完整的年月日！
#然后在定义变量今年是哪一年，最后利用运算符来进行递增运算，看起来是不是很简单
echo "今年是 $(date +%Y),明年是 $[ $(date +%Y) +1 ]"
echo "今年是 $(date +%Y),明年是 $(( $(date +%Y) +1 ))"
echo "今年是 $(date +%Y),后年是 $(( $(date +%Y) +2 ))"

#利用变量运算计算今年还剩下多少周？
#根据系统时间获取今年还剩下多少个星期，已经过了多少星期？
#编写思路：
#还剩多少个星期如何计算？
#首先，要计算开年到现在的时间已经过了多少天；
#然后，在用365减去过了多少天并除以7得到了剩余的星期；
#再次，求已经过了多少星期，就是用过了多少天除以7即可；
#最后，用365减去过了多少天得到距离新年的天数；
#总之，得到这些数值的前提，一定是要获取到已经过了多少天的天数，否则后面的一些求值会失败！
#通过对date的命令参数帮助得到 %j能获取到过了多少天
: '
date --help
给定的格式FORMAT 控制着输出，解释序列如下：

  %%	一个文字的 %
  %a	当前locale 的星期名缩写(例如： 日，代表星期日)
  %A	当前locale 的星期名全称 (如：星期日)
  %b	当前locale 的月名缩写 (如：一，代表一月)
  %B	当前locale 的月名全称 (如：一月)
  %c	当前locale 的日期和时间 (如：2005年3月3日 星期四 23:05:25)
  %C	世纪；比如 %Y，通常为省略当前年份的后两位数字(例如：20)
  %d	按月计的日期(例如：01)
  %D	按月计的日期；等于%m/%d/%y
  %e	按月计的日期，添加空格，等于%_d
  %F   完整日期格式，等价于 %+4Y-%m-%d
  %g   ISO-8601 格式年份的最后两位（参见 %G）
  %G   ISO-8601 格式年份（参见 %V），一般只和 %V 结合使用
  %h	等于%b
  %H	小时(00-23)
  %I	小时(00-12)
  %j	按年计的日期(001-366)
 ... 
'
echo '(2)-----------------------完美分割线--------------------------------'
day1=$(date +%j)  #1.距离新年剩余多少天
echo "距离新年还剩下：$[ 365 - ${day1#*0} ] "
echo "已经过了多少个星期：$[ ${day1#*0}/7 ]"
echo "还剩下多少个星期：$[(365 - ${day1#*0}) /7 ] "
