#!/bin/bash
# **********************************************************
# * Author : liangliangSu
# * Email : sll917@hotmail.com
# * Create time : 2022-12-28 16:44
# * Filename : 08命令参数.sh
# **********************************************************
#前面已经讲到，变量名只能包含数字、字母和下划线，因为某些包含其他字符的变量有特殊含义，这样的变量被
#称为特殊变量。
: '
#特殊变量列表
#变量 含义
#***************************************************************************************
#$0 当前脚本的文件名
#$n 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。
#$# 传递给脚本或函数的参数个数。
#$* 传递给脚本或函数的所有参数。
#$@ 传递给脚本或函数的所有参数。被双引号(" ")包含时，与 $* 稍有不同，下面将会讲到。
#$? 上个命令的退出状态，或函数的返回值。
#$$ 当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。
#***************************************************************************************
'
#命令行参数
#运行脚本时传递给脚本的参数称为命令行参数。命令行参数用 $n 表示，例如，
#$1 表示第一个参数，
#$2 表示第二个参数，依次类推。
#请看下面的脚本：
#!/bin/bash
echo "File Name: $0"
echo "First Parameter : $1"
echo "First Parameter : $2"
echo "Quoted Values: $@"
echo "Quoted Values: $*"
echo "Total Number of Parameters : $#"
echo '(1)-----------------------------------------------------------'
: '
$* 和 $@ 的区别
$* 和 $@ 都表示传递给函数或脚本的所有参数:
1)不被双引号(" ")包含时，都以"$1" "$2" … "$n" 的形式输出所有参数。
2)但是当它们被双引号(" ")包含时，"$*" 会将所有的参数作为一个整体，以"$1 $2 … $n"的形式输出所有参数；"$@" 会将各个参数分开，以"$1" "$2" … "$n" 的形式输出所有参数。
'
#下面的例子可以清楚的看到 $* 和 $@ 的区别：
#!/bin/bash
echo "\$*=" $*
echo "\"\$*\"=" "$*"
echo "\$@=" $@
echo "\"\$@\"=" "$@"
echo "print each param from \$*"
for var in $*
do
echo "$var"
done
echo "print each param from \$@"
for var in $@
do
echo "$var"
done
echo '(2)-----------------------------------------------------------'
echo "print each param from \"\$*\""
for var in "$*"
do
echo "$var"
done
echo "print each param from \"\$@\""
for var in "$@"
do
echo "$var"
done
